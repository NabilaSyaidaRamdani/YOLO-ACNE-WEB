# -*- coding: utf-8 -*-
"""COUNT UNTUK SEMHAS BISMILLAH.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CRFPVa49n4GRCzjuoKNFNhqKXJlpI614
"""

!pip install ultralytics

from ultralytics import YOLO

model = YOLO('yolo11s.pt')

model = YOLO('/content/best.pt')

from collections import Counter

# Hasil prediksi
results = model("WHITEHEADS DAN PUSTULE.jpg")[0]

# Ambil semua class ID
class_ids = results.boxes.cls.cpu().numpy()

# Dapatkan nama-nama kelas dari model
class_names = results.names

# Hitung jumlah masing-masing class
counts = Counter(class_ids)

# Tampilkan hasil counting
for class_id, count in counts.items():
    class_name = class_names[int(class_id)]
    print(f"{class_name}: {count}")

results.show()

from ultralytics import YOLO
import cv2
from collections import Counter
from matplotlib import pyplot as plt

# 1. Load model
model = YOLO("best.pt")

# 2. Prediksi gambar
results = model("WHITEHEADS DAN PUSTULE.jpg")[0]

# 3. Hitung jumlah per class
class_ids = results.boxes.cls.cpu().numpy()
class_names = results.names
counts = Counter(class_ids)

# 4. Buat gambar dengan bounding box pakai .plot()
img_with_boxes = results.plot()  # Ini gambar NumPy array dengan box + label

# 5. Tambahkan label total count per kelas di pojok gambar (pakai OpenCV)
y_offset = 30
for i, (class_id, count) in enumerate(counts.items()):
    name = class_names[int(class_id)]
    label = f"{name}: {count}"
    cv2.putText(img_with_boxes, label, (10, y_offset + i * 30),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

# 6. Simpan dan tampilkan hasil akhir
cv2.imwrite("output_dengan_nama_dan_count.jpg", img_with_boxes)

plt.imshow(cv2.cvtColor(img_with_boxes, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

from ultralytics import YOLO
import cv2
from collections import Counter
from matplotlib import pyplot as plt

# Load model
model = YOLO("best.pt")  # ganti sesuai model kamu

# Prediksi
results = model("WHITEHEADS DAN PUSTULE.jpg")[0]

# Hitung jumlah per kelas
class_ids = results.boxes.cls.cpu().numpy()
class_names = results.names
counts = Counter(class_ids)

# Gambar hasil deteksi dengan bounding box
img_with_boxes = results.plot()

# Tambahkan label total per kelas dengan background
y_offset = 30
for i, (class_id, count) in enumerate(counts.items()):
    name = class_names[int(class_id)]
    label = f"{name}: {count}"

    # Set posisi teks
    x, y = 10, y_offset + i * 35

    # Ukuran teks (untuk kotak)
    font = cv2.FONT_HERSHEY_SIMPLEX
    scale = 1
    thickness = 2
    (text_w, text_h), _ = cv2.getTextSize(label, font, scale, thickness)

    # Gambar background rectangle
    cv2.rectangle(img_with_boxes, (x - 5, y - 25), (x + text_w + 5, y + 5), (0, 0, 0), -1)

    # Tambahkan teks di atas kotaknya
    cv2.putText(img_with_boxes, label, (x, y), font, scale, (255, 255, 255), thickness)

# Simpan dan tampilkan
cv2.imwrite("hasil_final_dengan_bg.jpg", img_with_boxes)

plt.imshow(cv2.cvtColor(img_with_boxes, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

from ultralytics import YOLO
import cv2
from collections import Counter
from matplotlib import pyplot as plt

# Load model
model = YOLO("best.pt")  # ganti sesuai model kamu

# Prediksi
results = model("WHITEHEADS DAN PUSTULE.jpg")[0]

# Hitung jumlah per kelas
class_ids = results.boxes.cls.cpu().numpy()
class_names = results.names
counts = Counter(class_ids)
total_jerawat = sum(counts.values())

# Gambar hasil deteksi dengan bounding box
img_with_boxes = results.plot()

# --- 1. Tambahkan label kondisi wajah: Normal / Parah ---
# Tentukan status
status = "Parah" if total_jerawat > 5 else "Normal"

# Set posisi dan gaya teks
label_status = f"Status: {status}"
x, y = 10, 30
font = cv2.FONT_HERSHEY_SIMPLEX
scale = 1
thickness = 2
(text_w, text_h), _ = cv2.getTextSize(label_status, font, scale, thickness)

# Kotak background
bg_color = (0, 0, 255) if status == "Parah" else (0, 255, 0)  # merah/hijau
cv2.rectangle(img_with_boxes, (x - 5, y - 25), (x + text_w + 5, y + 5), bg_color, -1)

# Teks status
cv2.putText(img_with_boxes, label_status, (x, y), font, scale, (255, 255, 255), thickness)

# --- 2. Tambahkan label jumlah per kelas ---
y_offset = 70  # posisi di bawah status
for i, (class_id, count) in enumerate(counts.items()):
    name = class_names[int(class_id)]
    label = f"{name}: {count}"
    tx, ty = 10, y_offset + i * 35
    (tw, th), _ = cv2.getTextSize(label, font, scale, thickness)
    cv2.rectangle(img_with_boxes, (tx - 5, ty - 25), (tx + tw + 5, ty + 5), (0, 0, 0), -1)
    cv2.putText(img_with_boxes, label, (tx, ty), font, scale, (255, 255, 255), thickness)

# Simpan & tampilkan
cv2.imwrite("hasil_dengan_status.jpg", img_with_boxes)

plt.imshow(cv2.cvtColor(img_with_boxes, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

from ultralytics import YOLO
import cv2
from collections import Counter
from matplotlib import pyplot as plt

# Load model
model = YOLO("best.pt")  # ganti sesuai model kamu

# Prediksi
results = model("WHITEHEADS DAN PUSTULE.jpg")[0]

# Hitung jumlah per kelas
class_ids = results.boxes.cls.cpu().numpy()
class_names = results.names
counts = Counter(class_ids)
total_jerawat = sum(counts.values())

# Gambar hasil deteksi dengan bounding box
img_with_boxes = results.plot()

# --- 1. Tambah label jumlah per kelas di pojok atas kiri ---
font = cv2.FONT_HERSHEY_SIMPLEX
scale = 1
thickness = 2
y_offset = 30

for i, (class_id, count) in enumerate(counts.items()):
    name = class_names[int(class_id)]
    label = f"{name}: {count}"
    x, y = 10, y_offset + i * 35
    (tw, th), _ = cv2.getTextSize(label, font, scale, thickness)
    cv2.rectangle(img_with_boxes, (x - 5, y - 25), (x + tw + 5, y + 5), (0, 0, 0), -1)
    cv2.putText(img_with_boxes, label, (x, y), font, scale, (255, 255, 255), thickness)

# --- 2. Tambahkan STATUS besar di bawah gambar ---
status = "Parah" if total_jerawat > 5 else "Normal"
status_text = f"Status: {status}"

# Gaya teks status
font_status = cv2.FONT_HERSHEY_SIMPLEX
status_scale = 2  # lebih besar
status_thickness = 3
(text_w, text_h), _ = cv2.getTextSize(status_text, font_status, status_scale, status_thickness)

# Tentukan posisi bawah tengah
img_h, img_w, _ = img_with_boxes.shape
x = int((img_w - text_w) / 2)
y = img_h - 30  # 30 pixel dari bawah

# Background warna: merah/hijau
bg_color = (0, 0, 255) if status == "Parah" else (0, 255, 0)
cv2.rectangle(img_with_boxes, (x - 10, y - text_h - 10), (x + text_w + 10, y + 10), bg_color, -1)

# Tambah teks status
cv2.putText(img_with_boxes, status_text, (x, y), font_status, status_scale, (255, 255, 255), status_thickness)

# Simpan dan tampilkan
cv2.imwrite("hasil_status_di_bawah.jpg", img_with_boxes)

plt.imshow(cv2.cvtColor(img_with_boxes, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

# Prediksi
results = model("/content/WhatsApp Image 2024-11-17 at 17.21.30_a8c37f85.jpg")[0]

# Hitung jumlah per kelas
class_ids = results.boxes.cls.cpu().numpy()
class_names = results.names
counts = Counter(class_ids)
total_jerawat = sum(counts.values())

# Gambar hasil deteksi dengan bounding box
img_with_boxes = results.plot()

# --- 1. Tambah label jumlah per kelas di pojok atas kiri ---
font = cv2.FONT_HERSHEY_SIMPLEX
scale = 1
thickness = 2
y_offset = 30

for i, (class_id, count) in enumerate(counts.items()):
    name = class_names[int(class_id)]
    label = f"{name}: {count}"
    x, y = 10, y_offset + i * 35
    (tw, th), _ = cv2.getTextSize(label, font, scale, thickness)
    cv2.rectangle(img_with_boxes, (x - 5, y - 25), (x + tw + 5, y + 5), (0, 0, 0), -1)
    cv2.putText(img_with_boxes, label, (x, y), font, scale, (255, 255, 255), thickness)

# --- 2. Tambahkan STATUS besar di bawah gambar ---
status = "Parah" if total_jerawat > 5 else "Normal"
status_text = f"Status: {status}"

# Gaya teks status
font_status = cv2.FONT_HERSHEY_SIMPLEX
status_scale = 5  # lebih besar
status_thickness = 3
(text_w, text_h), _ = cv2.getTextSize(status_text, font_status, status_scale, status_thickness)

# Tentukan posisi bawah tengah
img_h, img_w, _ = img_with_boxes.shape
x = int((img_w - text_w) / 2)
y = img_h - 30  # 30 pixel dari bawah

# Background warna: merah/hijau
bg_color = (0, 0, 255) if status == "Parah" else (0, 255, 0)
cv2.rectangle(img_with_boxes, (x - 10, y - text_h - 10), (x + text_w + 10, y + 10), bg_color, -1)

# Tambah teks status
cv2.putText(img_with_boxes, status_text, (x, y), font_status, status_scale, (0, 0, 0), status_thickness)

# Simpan dan tampilkan
cv2.imwrite("foto nabila untuk hasil.jpg", img_with_boxes)

plt.imshow(cv2.cvtColor(img_with_boxes, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

# Load video
video_path = "/content/ACNE TEST.mp4"  # path video input
cap = cv2.VideoCapture(video_path)

# Output video writer
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
fps = cap.get(cv2.CAP_PROP_FPS)
width  = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
out = cv2.VideoWriter("for semhas (1).mp4", fourcc, fps, (width, height))

# Loop per frame
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Inference ke model
    results = model(frame)[0]
    class_ids = results.boxes.cls.cpu().numpy()
    class_names = results.names
    counts = Counter(class_ids)
    total_jerawat = sum(counts.values())

    # Buat hasil visual dari YOLO (bounding box + label jerawat)
    frame_with_boxes = results.plot()

    # Tambah label jumlah per kelas
    y_offset = 30
    for i, (class_id, count) in enumerate(counts.items()):
        name = class_names[int(class_id)]
        label = f"{name}: {count}"
        x, y = 10, y_offset + i * 35
        font = cv2.FONT_HERSHEY_SIMPLEX
        scale = 1
        thickness = 2
        (tw, th), _ = cv2.getTextSize(label, font, scale, thickness)
        cv2.rectangle(frame_with_boxes, (x - 5, y - 25), (x + tw + 5, y + 5), (0, 0, 0), -1)
        cv2.putText(frame_with_boxes, label, (x, y), font, scale, (255, 255, 255), thickness)

    # Tentukan status keparahan berdasarkan jumlah jerawat
    if total_jerawat > 10:
        status = "Severe"
    elif total_jerawat == 10:
        status = "Moderate"  # Ganti Normal jadi Moderate
    else:
        status = "Normal"    # Ganti Mild jadi Normal

    # Tambah STATUS di bawah
    status_text = f"Status: {status}"
    font_status = cv2.FONT_HERSHEY_SIMPLEX
    scale_status = 2
    thickness_status = 3
    (text_w, text_h), _ = cv2.getTextSize(status_text, font_status, scale_status, thickness_status)
    img_h, img_w, _ = frame_with_boxes.shape
    x = int((img_w - text_w) / 2)
    y = img_h - 30
    bg_color = (0, 0, 255) if status == "Severe" else (0, 255, 255) if status == "Moderate" else (0, 255, 0)
    cv2.rectangle(frame_with_boxes, (x - 10, y - text_h - 10), (x + text_w + 10, y + 10), bg_color, -1)
    cv2.putText(frame_with_boxes, status_text, (x, y), font_status, scale_status, (255, 255, 255), thickness_status)

    # Simpan frame ke video
    out.write(frame_with_boxes)

# Selesai
cap.release()
out.release()
print("✅ Video selesai diproses dan disimpan sebagai 'kiw semhas (1).mp4'")

from collections import Counter
import cv2
import numpy as np
import matplotlib.pyplot as plt

# --- Prediksi dengan YOLO ---
results = model("/content/WhatsApp Image 2024-11-17 at 17.21.30_a8c37f85.jpg")[0]

# Hitung jumlah per kelas
class_ids = results.boxes.cls.cpu().numpy()
class_names = results.names
counts = Counter(class_ids)
total_jerawat = sum(counts.values())

# Gambar hasil deteksi
img_with_boxes = results.plot()

# --- Tambah BORDER PUTIH di bawah gambar ---
status = "Severe" if total_jerawat > 5 else "Normal"
img_h, img_w, _ = img_with_boxes.shape
border_height = 600
white_border = np.ones((border_height, img_w, 3), dtype=np.uint8) * 255
combined_img = np.vstack((img_with_boxes, white_border))

# Font setting
font_detail = cv2.FONT_HERSHEY_SIMPLEX
font_scale = 2.2
font_thick = 7

# Data teks
lines = [
    f"Status: {status}",
    f"Total jerawat terdeteksi: {total_jerawat}",
    ", ".join([f"{class_names[int(cid)]}: {count}" for cid, count in counts.items()])
]

# Tulis teks satu per satu dengan latar belakang
line_spacing = 70
start_y = img_h + 70

for i, text in enumerate(lines):
    (tw, th), _ = cv2.getTextSize(text, font_detail, font_scale, font_thick)
    x = int((img_w - tw) / 2)
    y = start_y + i * line_spacing

    # Background kotak putih semi-transparan
    cv2.rectangle(combined_img, (x - 30, y - th - 20), (x + tw + 20, y + 20), (200, 100, 255), -1)

    # Tulisan tebal warna hitam
    cv2.putText(combined_img, text, (x, y), font_detail, font_scale, (200, 10, 50), font_thick)

# --- Simpan dan tampilkan ---
cv2.imwrite("foto_nabila_final_rapih.jpg", combined_img)
plt.imshow(cv2.cvtColor(combined_img, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

from collections import Counter
import cv2
import numpy as np
import matplotlib.pyplot as plt

# --- Prediksi dengan YOLO ---
results = model("/content/WHITEHEADS24.jpg")[0]

# Hitung jumlah per kelas
class_ids = results.boxes.cls.cpu().numpy()
class_names = results.names
counts = Counter(class_ids)
total_jerawat = sum(counts.values())

# Gambar hasil deteksi
img_with_boxes = results.plot()

# --- Tambah BORDER PUTIH di bawah gambar ---
status = "Severe" if total_jerawat > 5 else "Normal"
img_h, img_w, _ = img_with_boxes.shape
border_height = 600
white_border = np.ones((border_height, img_w, 3), dtype=np.uint8) * 255
combined_img = np.vstack((img_with_boxes, white_border))

# Font setting
font_detail = cv2.FONT_HERSHEY_SIMPLEX
font_scale = 2.2
font_thick = 6

# Data teks
lines = [
    f"Status: {status}",
    f"Total jerawat terdeteksi: {total_jerawat}",
    ", ".join([f"{class_names[int(cid)]}: {count}" for cid, count in counts.items()])
]

# Tulis teks satu per satu dengan latar belakang
line_spacing = 95
start_y = img_h + 50

for i, text in enumerate(lines):
    (tw, th), _ = cv2.getTextSize(text, font_detail, font_scale, font_thick)
    x = int((img_w - tw) / 2)
    y = start_y + i * line_spacing

    # Background kotak putih semi-transparan
    cv2.rectangle(combined_img, (x - 30, y - th - 20), (x + tw + 20, y + 20), (200, 100, 255), -1)

    # Tulisan tebal warna hitam
    cv2.putText(combined_img, text, (x, y), font_detail, font_scale, (200, 10, 50), font_thick)

# --- Simpan dan tampilkan ---
cv2.imwrite("WHITEHEADS HASIL.jpg", combined_img)
plt.imshow(cv2.cvtColor(combined_img, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

